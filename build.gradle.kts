plugins {
    alias(libs.plugins.kotlin.jvm)
    alias(libs.plugins.ktor)
}

group = "com.matt"
version = "0.0.1"

application {
    mainClass = "io.ktor.server.netty.EngineMain"
}

dependencies {
    implementation(libs.ktor.server.core)
    implementation(libs.ktor.server.content.negotiation)
    implementation(libs.ktor.server.netty)
    implementation(libs.logback.classic)
    implementation(libs.ktor.server.config.yaml)
    testImplementation(libs.ktor.server.test.host)
    testImplementation(libs.kotlin.test.junit)
}

val generateBuildConfigFile = tasks.register("generateBuildConfigFile") {
    val outputDir = layout.buildDirectory.dir("generated/source/buildConfig").get()
    val outputFile: File = outputDir.file("com/matt/BuildConfig.kt").asFile
    outputs.file(outputFile)

    doLast {
        outputFile.parentFile.mkdirs()
        outputFile.writeText(
            """
                package com.matt

                /**
                 * Auto-generated by build.gradle.kts.
                 * Do not edit this file manually.
                 */
                object BuildConfig {
                    const val VERSION = "${project.version}"
                }
            """.trimIndent()
        )
    }
}

// Add generated source directory to source sets
kotlin.sourceSets.main {
    kotlin.srcDir("${layout.buildDirectory.asFile.get()}/generated/source/buildConfig")
}

// Make sure BuildConfig.kt is generated before compiling Kotlin
tasks.named("compileKotlin") {
    dependsOn(generateBuildConfigFile)
}